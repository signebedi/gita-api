{% extends "base.html.jinja" %}

{% block title %}
Gita API
{% endblock %}


{% block content %}
<div class="container mt-5">
    <h1>Fuzzy Search</h1>
    <p>Select an author below and search for a string under 100 characters in length. This will return references that best match your query, with a reference number to the left that, when clicked, will copy the text to your clipboard. To the right of each row, you will find a color-coded number (ranging from 0 to 100) designating the match score - the higher the score, the better your query matched the verse.</p>
    <form id="gitaForm">
        <fieldset class="form-group">
            <label for="author" class="form-label mt-5">Select Author:</label>
            <select name="author" id="author" class="form-select">
                {% for id, name in authors %}
                    <option value="{{ id }}" {% if id == 16 %}selected='yes'{% endif %}>{{ name }}</option>
                {% endfor %}
            </select>
        </fieldset>

        <fieldset class="form-group">
            <label for="query" class="form-label mt-5">Query:</label>
            <input type="text" id="query" maxlength="100" name="query" class="form-control" placeholder="Sword Sever Knowledge Doubt Self Yoga Arise">
        </fieldset>

        <fieldset style="padding-top: 10px;" class="form-group">
            <button type="submit" class="btn btn-primary" id="form-button-submit">Submit</button>
        </fieldset>
    </form>
</div>

<div id="resultContainer" class="container mt-5 results-div"></div>

{% endblock %}



{% block scripts %}
<script>
    document.getElementById('gitaForm').addEventListener('submit', function(e) {
        e.preventDefault();

        const authorId = document.getElementById('author').value;
        const query = document.getElementById('query').value;
        const container = document.getElementById('resultContainer');

        // Add headers to the fetch request
        const headers = new Headers({
            'X-API-KEY': '{{ current_user.api_key }}'
        });

        fetch(`/api/search?query=${query}&author_id=${authorId}`, { headers: headers })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    container.innerHTML = `<p class="text-danger mb-3">${data.error}</p>`;
                } else if (data.content && data.content.text && data.content.ref_list) {
                    // Check if ref_list and text are of the same length
                    if (data.content.text.length === data.content.ref_list.length) {
                        const combinedHtml = data.content.text.map((text, index) => {
                            const ref = data.content.ref_list[index];
                            const score = data.content.match_scores[index];
                            const color = getScoreColor(score);
                            return `<p class="lead mb-3"><span class="badge bg-secondary" id="text-entry" onclick="copyToClipboard(this.parentNode)">${ref}</span> ${text}<sup title="${score}" style="color: ${color};">${score}</sup></p>`;
                        }).join('');
                        container.innerHTML = combinedHtml;
                    } else {
                        container.innerHTML = `<p class="text-muted mb-3">Mismatch in text and query data.</p>`;
                    }
                } else {
                    container.innerHTML = `<p class="text-muted mb-3">No content available.</p>`;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                container.innerHTML = `<p>An error occurred: ${error}</p>`;
            });
    });


    //function getScoreColor(score) {
    //    // This function returns a color depending on the score
    //    if (score < 50) {
    //        return `rgb(255, ${Math.floor(255 * (score / 50))}, 0)`; // Red to yellow
    //    } else {
    //        return `rgb(${255 - Math.floor(255 * ((score - 50) / 50))}, 255, 0)`; // Yellow to green
    //    }
    //}

    function getScoreColor(score) {
        if (score <= 35) {
            // Transition from red to yellow
            return `rgb(255, ${Math.floor(255 * (score / 35))}, 0)`; // Red to yellow
        } else if (score <= 70) {
            // Transition from yellow to green
            let normalizedScore = (score - 35) / 35; // Normalize score between 35 and 70
            return `rgb(${255 - Math.floor(255 * normalizedScore)}, 255, 0)`; // Yellow to green
        } else {
            // Scores above 70 are green
            return 'rgb(0, 255, 0)'; // Solid green
        }
    }



    function copyToClipboard(element) {
        // Copying to clipboard
        var text = element.innerText; // Get the text of the entire paragraph
        var elem = document.createElement("textarea");
        document.body.appendChild(elem);
        elem.value = text;
        elem.select();
        document.execCommand("copy");
        document.body.removeChild(elem);

        // Find the badge element (reference ID) within the paragraph
        var badge = element.querySelector('.badge');

        // Tooltip activation
        var tooltip = new bootstrap.Tooltip(badge, {
            title: "Copied!",
            trigger: "manual" 
        });

        tooltip.show(); // Show the tooltip

        // Hide tooltip after 2 seconds
        setTimeout(function() {
            tooltip.hide();
        }, 2000);
    }


</script>
{% endblock %}
