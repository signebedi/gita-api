{% extends "base.html.jinja" %}

{% block title %}
Gita API
{% endblock %}


{% block content %}
<div class="container mt-5">
    <h1>Welcome to the Gita API</h1>
    <form id="gitaForm">
        <fieldset class="form-group">
            <label for="author" class="form-label mt-5">Select Author:</label>
            <select name="author" id="author" class="form-select">
                {% for id, name in authors %}
                    <option value="{{ id }}" {% if id == 16 %}selected='yes'{% endif %}>{{ name }}</option>
                {% endfor %}
            </select>
        </fieldset>

        <fieldset class="form-group">
            <label for="reference" class="form-label mt-5">Reference (Chapter.Verse):</label>
            <input type="text" onchange="validateReference(this.value);" id="reference" name="reference" class="form-control" placeholder="e.g., 1.5">
			<div class="valid-feedback" id="reference-is-valid">This field is valid!</div>
			<div class="invalid-feedback" id="reference-is-invalid">This field is invalid!</div>    

        </fieldset>

        <fieldset style="padding-top: 10px;" class="form-group">
            <button type="submit" class="btn btn-primary" id="form-button-submit">Submit</button>
        </fieldset>
    </form>
</div>

<div id="resultContainer" class="container mt-5 results-div"></div>

{% endblock %}



{% block scripts %}
<script>
    document.getElementById('gitaForm').addEventListener('submit', function(e) {
        e.preventDefault();

        const authorId = document.getElementById('author').value;
        const reference = document.getElementById('reference').value;
        const container = document.getElementById('resultContainer');

        // Add headers to the fetch request
        const headers = new Headers({
            'X-API-KEY': '{{ current_user.api_key }}'
        });

        fetch(`/api/gita?reference=${reference}&author_id=${authorId}`, { headers: headers })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    container.innerHTML = `<p class="text-danger mb-3">${data.error}</p>`;
                } else if (data.content && data.content.text) {
                    const textHtml = data.content.text.map(text => `<p class="lead mb-3">${text}</p>`).join('');
                    container.innerHTML = textHtml;
                } else {
                    container.innerHTML = `<p class="text-muted mb-3">No content available.</p>`;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                container.innerHTML = `<p>An error occurred: ${error}</p>`;
            });
    });

    async function validateReference(val) {

        const foo = document.getElementById("reference")

        let payload = {
            value: val
        };

        let response = await fetch('{{ url_for ('validate_reference') }}', {
            method: 'POST',
            headers: {
            'Content-Type': 'application/json;charset=utf-8'
            },
            body: JSON.stringify(payload)
        });
        
        let result = await response.json();
        var submit = document.getElementById("form-button-submit");

        if (result['status'] == 'success') {
            foo.classList.remove("is-invalid")
            foo.classList.add("is-valid")
            submit.classList.remove("disabled")

        } else {
            document.getElementById("reference-is-invalid").innerHTML = "This field is invalid! " + result['msg']
            foo.classList.add("is-invalid")
            foo.classList.remove("is-valid")
            submit.classList.add("disabled")
        }
    }

</script>
{% endblock %}
